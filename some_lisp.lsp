(DEFUN position-in-list(targ l)
	(cond((atom l) nil)
	((equal targ (car l)) 0)
	((position-in-list targ (cdr l)) (+ 1 (position-in-list targ (cdr l))))
	)
)

(DEFUN findNth(num lst)
	(if (zerop num)
		(car lst)
		(findNth (1- num) (cdr lst))
	)
)

(DEFUN flatten(l)
	(cond((null l) nil)
		((atom(car l))(cons(car l)(flatten(cdr l))))
		(t(append(flatten(car l))(flatten(cdr l))))
	)
)

(DEFUN rotate(list count)
	(if(minusp count)
		(rotate list(+(length list)count))
		(nconc(subseq list count)(subseq list 0 count))
	)
)

(DEFUN reverseIt(l)
	(cond((null l) '())
		(t(append(reverseIt(cdr l))(list(car l))))
	)
)

(DEFUN atomcounter(l)
	(cond((null l) 0)
		((atom l) 1)
		(t (+ (atomcounter(car l))
		(atomcounter(cdr l))))
	)
)

(DEFUN drop(nth list)
	(cond((equal nil list)list)
		((zerop nth)(cdr list))
		(t(cons(car list)(drop(- nth 1)(cdr list))))
	)
)

(DEFUN dropevery(n list)
	(labels((rec(i list)
		(cond((null list) nil)
			((= i 1)(rec n(cdr list)))
			(t(cons(car list)(rec(1- i)(cdr list)))))))
	(rec n list)
	)
)

(DEFUN mapIt(l1 l2 l3 l4 l5 l6)
	(cons(car l1)(cons(car l2)(cons(car l3)(cons(car l4)(cons(car l5)l6)))))
)
